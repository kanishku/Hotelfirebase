{"version":3,"file":"static/js/819.3e69b161.chunk.js","mappings":"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","sources":["components/Card.tsx","components/Edit.tsx","components/Information.tsx","lib/firebase.ts","lib/controller.ts"],"sourcesContent":["import { DocumentData, onSnapshot, QuerySnapshot } from \"firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport { hotelsCollection } from \"../lib/controller\";\nimport { NewHotelType } from \"../types/hotel\";\nimport Information from \"./Information\";\n\nfunction Card() {\n  const [hotels, setHotels] = useState<NewHotelType[]>([]);\n  const [sort, setSort] = useState<string>(\"\");\n\n  useEffect(\n    () =>\n      onSnapshot(hotelsCollection, (snapshot: QuerySnapshot<DocumentData>) => {\n        setHotels(\n          snapshot.docs.map((doc) => {\n            return {\n              id: doc.id,\n              ...doc.data(),\n            };\n          })\n        );\n      }),\n    []\n  );\n\n  const sortedHotels = hotels?.sort((a, b) => {\n    if (sort === \"title\") {\n      if (a.title && b.title) return a.title.localeCompare(b.title);\n    }\n    if (sort === \"perNight\") {\n      return Number(a.perNight) - Number(b.perNight);\n    }\n    if (sort === \"stars\") {\n      return Number(a.stars) - Number(b.stars);\n    }\n    if (sort === \"review\") {\n      return Number(a.review) - Number(b.review);\n    }\n    return 0;\n  });\n\n  return (\n    <div className=\"card\">\n      <h2 className=\"sort-title\">Sort the hotels</h2>\n      <select\n        className=\"select\"\n        defaultValue={\"\"}\n        onChange={(e) => setSort(e.target.value)}\n      >\n        <option value=\"\">Sort By</option>\n        <option value=\"title\">Title</option>\n        <option value=\"perNight\">Price per night</option>\n        <option value=\"stars\">Stars</option>\n        <option value=\"review\">Review</option>\n      </select>\n      <h2 className=\"title\">All Hotels</h2>\n      {hotels && hotels.length ? (\n        <div className=\"individual-card\">\n          {sortedHotels?.map((hotel) => (\n            <Information key={hotel.id} hotel={hotel} />\n          ))}\n        </div>\n      ) : (\n        <h2 className=\"no-hotels\">There are no hotels. Please add one</h2>\n      )}\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { updateHotel } from \"../lib/controller\";\n\ninterface IProps {\n  editDescription: boolean;\n  setEditDescription: React.Dispatch<React.SetStateAction<boolean>>;\n  id?: string;\n}\n\nfunction Edit({ editDescription, setEditDescription, id }: IProps) {\n  const [newDescription, setNewDescription] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  const handleUpdate = () => {\n    // update hotel\n    updateHotel(id, { description: newDescription });\n    setEditDescription(!editDescription);\n    // navigate back to homepage\n    navigate(\"/\");\n  };\n\n  return (\n    <div className=\"edit\">\n      <label>Please enter the new hotel description below:</label>\n      <textarea\n        required\n        name=\"description\"\n        id=\"description\"\n        value={newDescription}\n        onChange={(e) => setNewDescription(e.target.value)}\n      />\n      <button className=\"update-button\" onClick={() => handleUpdate()}>\n        Update Hotel\n      </button>\n    </div>\n  );\n}\n\nexport default Edit;\n","import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { deleteHotel } from \"../lib/controller\";\nimport { NewHotelType } from \"../types/hotel\";\nimport Edit from \"./Edit\";\n\ninterface IProps {\n  hotel: NewHotelType;\n  detailsPage?: boolean;\n}\n\nfunction Information({ hotel, detailsPage }: IProps) {\n  const [editDescription, setEditDescription] = useState(false);\n\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"hotel-preview\">\n      <div className=\"image-container\">\n        <img className=\"location-image\" src={hotel.location} alt=\"Hotel\" />\n        <div className=\"highlights\">\n          <div className=\"highlights-text\">\n            <h2>{hotel.title}</h2>\n            <p className=\"region\">{hotel.region}</p>\n          </div>\n          <div className=\"highlights-price\">\n            <h2 className=\"per-night\">Â£{hotel.perNight}</h2>\n            <p>per night</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Description */}\n      <div className=\"description\">\n        <span className=\"reviews\">\n          <strong className=\"review-number\">{hotel.stars} stars</strong> (based\n          on {hotel.review} reviews)\n        </span>\n        <hr />\n        <span className=\"feature\">Main Feature: {hotel?.feature}</span>\n        {detailsPage ? (\n          <>\n            <p className=\"description-text\">\n              {hotel.description}{\" \"}\n              <strong\n                className=\"edit-text\"\n                onClick={() => setEditDescription(!editDescription)}\n              >\n                Edit Description\n              </strong>\n              {editDescription ? (\n                <Edit\n                  editDescription={editDescription}\n                  setEditDescription={setEditDescription}\n                  id={hotel.id}\n                />\n              ) : null}\n            </p>\n            <button onClick={() => deleteHotel(hotel.id, navigate)}>\n              Delete Hotel\n            </button>\n          </>\n        ) : (\n          <Link to={`/hotels/${hotel.id}`}>\n            <button className=\"moreinfo-btn\">View More Information</button>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Information;\n","import { initializeApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBQqWEPEyTND3gsdb9jidAyfAx_X6TwZFQ\",\n  authDomain: \"hotel-dashboard-7382a.firebaseapp.com\",\n  projectId: \"hotel-dashboard-7382a\",\n  storageBucket: \"hotel-dashboard-7382a.appspot.com\",\n  messagingSenderId: \"932112069738\",\n  appId: \"1:932112069738:web:c7c290689f6c302c4fc613\",\n  measurementId: \"G-P7W6VR1NZH\",\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n","import {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getFirestore,\n  setDoc,\n} from \"firebase/firestore\";\nimport { NavigateFunction } from \"react-router-dom\";\n// This is tree shaking from firestore\n\nimport { AddHotelType } from \"../types/hotel\";\nimport { app } from \"./firebase\";\n\nexport const firestore = getFirestore(app);\n\n// HOTELS COLLECTION\nexport const hotelsCollection = collection(firestore, \"hotels\");\n\n// ADD A NEW DOCUMENT TO YOUR COLLECTION\nexport const addHotel = async (hotelData: AddHotelType) => {\n  const newHotel = await addDoc(hotelsCollection, { ...hotelData });\n  console.log(`The new hotel was created at ${newHotel.path}`);\n};\n\n// DELETE A DOCUMENT IN YOUR COLLECTION\nexport const deleteHotel = async (\n  id: string | undefined,\n  navigate: NavigateFunction\n) => {\n  const document = doc(firestore, `hotels/${id}`);\n  await deleteDoc(document);\n  console.log(`The hotel has now been deleted`);\n  navigate(\"/\");\n};\n\n// EDIT A DOCUMENT / DESCRIPTION\nexport const updateHotel = async (id: string | undefined, docData: any) => {\n  const getHotel = doc(firestore, `hotels/${id}`);\n  await setDoc(getHotel, docData, { merge: true });\n  console.log(\"The value has been written to the database\");\n};\n"],"names":["useState","hotels","setHotels","sort","setSort","useEffect","onSnapshot","hotelsCollection","snapshot","docs","map","doc","id","data","sortedHotels","a","b","title","localeCompare","Number","perNight","stars","review","className","defaultValue","onChange","e","target","value","length","hotel","editDescription","setEditDescription","newDescription","setNewDescription","navigate","useNavigate","required","name","onClick","updateHotel","description","detailsPage","src","location","alt","region","feature","deleteHotel","to","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","getFirestore","collection","addHotel","hotelData","addDoc","newHotel","console","log","path","document","deleteDoc","docData","getHotel","setDoc","merge"],"sourceRoot":""}