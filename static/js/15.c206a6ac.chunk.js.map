{"version":3,"file":"static/js/15.c206a6ac.chunk.js","mappings":"qMAqEA,UA/DyB,WACvB,OAA4BA,EAAAA,EAAAA,UAAyB,IAArD,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4CF,EAAAA,EAAAA,UAAyB,IAArE,eAAOG,EAAP,KAAuBC,EAAvB,KAEMC,GAAYC,EAAAA,EAAAA,QAAyB,OAE3CC,EAAAA,EAAAA,YACE,kBACEC,EAAAA,EAAAA,IAAWC,EAAAA,IAAkB,SAACC,GAC5BR,EACEQ,EAASC,KAAKC,KAAI,SAACC,GACjB,OAAO,QACLC,GAAID,EAAIC,IACLD,EAAIE,OAEV,IAEJ,GAVH,GAWA,IAeF,OACE,iBAAKC,UAAU,eAAf,WACE,iBAAKA,UAAU,SAAf,WACE,kBACEC,KAAK,OACLD,UAAU,cACVE,YAAY,qBAGZC,IAAKd,KAEP,mBAAQe,QAvBO,WAAO,IAAD,EAEQ,QAA7B,UAAAf,EAAUgB,eAAV,eAAmBC,QACvBlB,EACEH,EAAOsB,QAAO,SAACC,GAAW,IAAD,EACvB,OAAOA,EACJC,MAAOC,cACPC,SAFI,UAEKtB,EAAUgB,eAFf,aAEK,EAAmBC,MAChC,IAEJ,EAaK,oBAEF,yBACGnB,EAAeyB,OACdzB,EAAeS,KAAI,SAACY,GAAD,OACjB,gBAAoBR,UAAU,gBAA9B,UACE,SAAC,KAAD,CAAMa,GAAE,kBAAaL,EAAMV,IAA3B,UACE,wBAAKU,EAAMC,WAFLD,EAAMV,GADC,KAQnB,gDAKT,C,oMCtDYgB,GAAMC,E,QAAAA,IAXI,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCKJC,GAAYC,EAAAA,EAAAA,IAAaV,GAGzBrB,GAAmBgC,EAAAA,EAAAA,IAAWF,EAAW,UAGzCG,EAAQ,yCAAG,WAAOC,GAAP,6FACCC,EAAAA,EAAAA,IAAOnC,GAAD,UAAwBkC,IAD/B,OAChBE,EADgB,OAEtBC,QAAQC,IAAR,uCAA4CF,EAASG,OAF/B,2CAAH,sDAMRC,EAAW,yCAAG,WACzBnC,EACAoC,GAFyB,mFAInBC,GAAWtC,EAAAA,EAAAA,IAAI0B,EAAD,iBAAsBzB,IAJjB,UAKnBsC,EAAAA,EAAAA,IAAUD,GALS,OAMzBL,QAAQC,IAAR,kCACAG,EAAS,KAPgB,2CAAH,wDAWXG,EAAW,yCAAG,WAAOvC,EAAwBwC,GAA/B,mFACnBC,GAAW1C,EAAAA,EAAAA,IAAI0B,EAAD,iBAAsBzB,IADjB,UAEnB0C,EAAAA,EAAAA,IAAOD,EAAUD,EAAS,CAAEG,OAAO,IAFhB,OAGzBX,QAAQC,IAAI,8CAHa,2CAAH,uD","sources":["components/Search/index.tsx","lib/firebase.ts","lib/controller.ts"],"sourcesContent":["import { DocumentData, onSnapshot, QuerySnapshot } from \"firebase/firestore\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { hotelsCollection } from \"../../lib/controller\";\nimport { NewHotelType } from \"../../types/hotel\";\n\nconst Search: React.FC = () => {\n  const [hotels, setHotels] = useState<NewHotelType[]>([]);\n  const [filteredHotels, setFilteredHotels] = useState<NewHotelType[]>([]);\n  //   const [search, setSearch] = useState<string>(\"\");\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  useEffect(\n    () =>\n      onSnapshot(hotelsCollection, (snapshot: QuerySnapshot<DocumentData>) => {\n        setHotels(\n          snapshot.docs.map((doc) => {\n            return {\n              id: doc.id,\n              ...doc.data(),\n            };\n          })\n        );\n      }),\n    []\n  );\n\n  const handleSearch = () => {\n    // if (search === \"\") return;\n    if (searchRef.current?.value === null) return;\n    setFilteredHotels(\n      hotels.filter((hotel) => {\n        return hotel\n          .title!.toLowerCase()\n          .includes(searchRef.current?.value as string);\n      })\n    );\n  };\n\n  return (\n    <div className=\"search__page\">\n      <div className=\"search\">\n        <input\n          type=\"text\"\n          className=\"inputsearch\"\n          placeholder=\"Search for a hotel\"\n          //   value={search}\n          //   onChange={(e) => setSearch(e.target.value)}\n          ref={searchRef}\n        />\n        <button onClick={handleSearch}>Go</button>\n      </div>\n      <div>\n        {filteredHotels.length ? (\n          filteredHotels.map((hotel) => (\n            <div key={hotel.id} className=\"search__title\">\n              <Link to={`/hotels/${hotel.id}`}>\n                <h1>{hotel.title}</h1>\n              </Link>\n            </div>\n          ))\n        ) : (\n          <h1>No hotels found</h1>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import { initializeApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBQqWEPEyTND3gsdb9jidAyfAx_X6TwZFQ\",\n  authDomain: \"hotel-dashboard-7382a.firebaseapp.com\",\n  projectId: \"hotel-dashboard-7382a\",\n  storageBucket: \"hotel-dashboard-7382a.appspot.com\",\n  messagingSenderId: \"932112069738\",\n  appId: \"1:932112069738:web:c7c290689f6c302c4fc613\",\n  measurementId: \"G-P7W6VR1NZH\",\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n","import {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getFirestore,\n  setDoc,\n} from \"firebase/firestore\";\nimport { NavigateFunction } from \"react-router-dom\";\n// This is tree shaking from firestore\n\nimport { AddHotelType } from \"../types/hotel\";\nimport { app } from \"./firebase\";\n\nexport const firestore = getFirestore(app);\n\n// HOTELS COLLECTION\nexport const hotelsCollection = collection(firestore, \"hotels\");\n\n// ADD A NEW DOCUMENT TO YOUR COLLECTION\nexport const addHotel = async (hotelData: AddHotelType) => {\n  const newHotel = await addDoc(hotelsCollection, { ...hotelData });\n  console.log(`The new hotel was created at ${newHotel.path}`);\n};\n\n// DELETE A DOCUMENT IN YOUR COLLECTION\nexport const deleteHotel = async (\n  id: string | undefined,\n  navigate: NavigateFunction\n) => {\n  const document = doc(firestore, `hotels/${id}`);\n  await deleteDoc(document);\n  console.log(`The hotel has now been deleted`);\n  navigate(\"/\");\n};\n\n// EDIT A DOCUMENT / DESCRIPTION\nexport const updateHotel = async (id: string | undefined, docData: any) => {\n  const getHotel = doc(firestore, `hotels/${id}`);\n  await setDoc(getHotel, docData, { merge: true });\n  console.log(\"The value has been written to the database\");\n};\n"],"names":["useState","hotels","setHotels","filteredHotels","setFilteredHotels","searchRef","useRef","useEffect","onSnapshot","hotelsCollection","snapshot","docs","map","doc","id","data","className","type","placeholder","ref","onClick","current","value","filter","hotel","title","toLowerCase","includes","length","to","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","getFirestore","collection","addHotel","hotelData","addDoc","newHotel","console","log","path","deleteHotel","navigate","document","deleteDoc","updateHotel","docData","getHotel","setDoc","merge"],"sourceRoot":""}